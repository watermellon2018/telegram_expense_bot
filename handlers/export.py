"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
"""
import config
from utils.export import get_month_name

from telegram import Update
from telegram.ext import CallbackContext, CommandHandler
from utils import excel
import os
import tempfile
import shutil
import pandas as pd

def export_excel_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /export –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    year = None
    if context.args:
        try:
            year = int(context.args[0])
        except ValueError:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /export [–≥–æ–¥]\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /export 2024"
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    excel_path = excel.get_excel_path(user_id, year)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(excel_path):
        if year:
            update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {year} –≥–æ–¥.")
        else:
            update.message.reply_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            shutil.copy2(excel_path, tmp_file.name)
            tmp_path = tmp_file.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(tmp_path, 'rb') as file:
            year_text = f" –∑–∞ {year} –≥–æ–¥" if year else ""
            update.message.reply_document(
                document=file,
                filename=f"expenses{year_text}.xlsx",
                caption=f"üìä –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã{year_text}\n\n"
                        f"–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_path)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'tmp_path' in locals():
            try:
                os.unlink(tmp_path)
            except:
                pass

def export_stats_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /export_stats –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: /export_stats [–≥–æ–¥] [–º–µ—Å—è—Ü]
    –ú–µ—Å—è—Ü –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–º (1-12) –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º (—è–Ω–≤–∞—Ä—å, —Ñ–µ–≤—Ä–∞–ª—å, –º–∞—Ä—Ç, –∏ —Ç.–¥.)
    """
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    year = None
    month = None
    
    if len(context.args) >= 1:
        try:
            year = int(context.args[0])
        except ValueError:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /export_stats [–≥–æ–¥] [–º–µ—Å—è—Ü]\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /export_stats 2024 –∏–ª–∏ /export_stats 2024 –∏—é–Ω—å"
            )
            return
    
    if len(context.args) >= 2:
        month_arg = context.args[1].lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —á–∏—Å–ª–æ
        try:
            month = int(month_arg)
            if month < 1 or month > 12:
                update.message.reply_text("‚ùå –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12.")
                return
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–∞–∑–≤–∞–Ω–∏–π
            if month_arg in config.MONTH_NAMES:
                month = config.MONTH_NAMES[month_arg]
            else:
                available_months = ", ".join([f"{num} ({name})" for name, num in config.MONTH_NAMES.items() if len(name) > 3 or name=='–º–∞–π'])
                update.message.reply_text(
                    f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Å—è—Ü '{month_arg}'.\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {available_months}\n"
                    f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 12."
                )
                return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    expenses_df = excel.get_all_expenses(user_id, year)
    
    if expenses_df is None or expenses_df.empty:
        if year:
            update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {year} –≥–æ–¥.")
        else:
            update.message.reply_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if month:
        expenses_df = expenses_df[expenses_df['month'] == month]
        if expenses_df.empty:
            month_name = get_month_name(month)
            update.message.reply_text(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month_name} {year} –≥–æ–¥–∞.")
            return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
            tmp_path = tmp_file.name
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        with pd.ExcelWriter(tmp_path, engine='openpyxl') as writer:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            expenses_df.to_excel(writer, sheet_name='–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã', index=False)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if not expenses_df.empty:
                category_stats = expenses_df.groupby('category')['amount'].agg(['sum', 'count', 'mean']).round(2)
                category_stats.columns = ['–û–±—â–∞—è —Å—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞']
                category_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º (–µ—Å–ª–∏ –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü—É)
                if not month:
                    monthly_stats = expenses_df.groupby('month')['amount'].agg(['sum', 'count', 'mean']).round(2)
                    monthly_stats.columns = ['–û–±—â–∞—è —Å—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞']
                    monthly_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü—É)
                if month:
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –∏–∑ –¥–∞—Ç—ã
                    expenses_df['day'] = pd.to_datetime(expenses_df['date']).dt.day
                    daily_stats = expenses_df.groupby('day')['amount'].agg(['sum', 'count', 'mean']).round(2)
                    daily_stats.columns = ['–û–±—â–∞—è —Å—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞']
                    daily_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º')
                
                # –¢–æ–ø-10 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
                top_expenses = expenses_df.nlargest(10, 'amount')[['date', 'category', 'amount', 'description']]
                top_expenses.to_excel(writer, sheet_name='–¢–æ–ø-10 —Ä–∞—Å—Ö–æ–¥–æ–≤', index=False)
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_amount = expenses_df['amount'].sum()
                total_count = len(expenses_df)
                avg_amount = expenses_df['amount'].mean()
                
                summary_stats = pd.DataFrame({
                    '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': ['–û–±—â–∞—è —Å—É–º–º–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ö–æ–¥–æ–≤', '–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞'],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [total_amount, total_count, avg_amount, expenses_df['amount'].max(), expenses_df['amount'].min()]
                })
                summary_stats.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(tmp_path, 'rb') as file:
            if month:
                month_name = get_month_name(month)
                filename = f"expense_stats_{year}_{month:02d}.xlsx"
                caption = f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {month_name} {year} –≥–æ–¥–∞\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."
            elif year:
                filename = f"expense_stats_{year}.xlsx"
                caption = f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {year} –≥–æ–¥\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."
            else:
                filename = "expense_stats_all.xlsx"
                caption = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."
            
            update.message.reply_document(
                document=file,
                filename=filename,
                caption=caption
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_path)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'tmp_path' in locals():
            try:
                os.unlink(tmp_path)
            except:
                pass

def register_export_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    dp.add_handler(CommandHandler("export", export_excel_command))
    dp.add_handler(CommandHandler("export_stats", export_stats_command)) 