"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram-–±–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
"""

import re
import datetime
from utils import excel

def parse_add_command(text):
    """
    –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
    –§–æ—Ä–º–∞—Ç—ã:
    - /add 100 –ø—Ä–æ–¥—É–∫—Ç—ã
    - /add 100 –ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    - 100 –ø—Ä–æ–¥—É–∫—Ç—ã
    - 100 –ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ amount, category, description –∏–ª–∏ None, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
    """
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /add, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if text.startswith('/add '):
        text = text[5:].strip()
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    pattern = r'^(\d+(?:\.\d+)?)\s+(\w+)(?:\s+(.+))?$'
    match = re.match(pattern, text)
    
    if match:
        amount = float(match.group(1))
        category = match.group(2).lower()
        description = match.group(3) if match.group(3) else ""
        
        return {
            'amount': amount,
            'category': category,
            'description': description
        }
    
    return None

def format_month_expenses(expenses, month=None, year=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    """
    if month is None:
        month = datetime.datetime.now().month
    if year is None:
        year = datetime.datetime.now().year
    
    month_name = datetime.date(year, month, 1).strftime('%B')
    
    if not expenses or expenses['total'] == 0:
        return f"–í {month_name} {year} –≥–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {month_name} {year} –≥–æ–¥–∞:\n\n"
    report += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {expenses['total']:.2f}\n"
    report += f"üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {expenses['count']}\n\n"
    
    report += "üìã –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º
    sorted_categories = sorted(
        expenses['by_category'].items(), 
        key=lambda x: x[1], 
        reverse=True
    )
    
    for category, amount in sorted_categories:
        from config import DEFAULT_CATEGORIES
        emoji = DEFAULT_CATEGORIES.get(category, "")
        report += f"{emoji} {category}: {amount:.2f}\n"
    
    return report

def format_category_expenses(category_data, category, year=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    """
    if year is None:
        year = datetime.datetime.now().year
    
    if not category_data or category_data['total'] == 0:
        return f"–í {year} –≥–æ–¥—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –±—ã–ª–æ."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    from config import DEFAULT_CATEGORIES
    emoji = DEFAULT_CATEGORIES.get(category.lower(), "")
    
    report = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {emoji} {category} –∑–∞ {year} –≥–æ–¥:\n\n"
    report += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {category_data['total']:.2f}\n"
    report += f"üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {category_data['count']}\n\n"
    
    report += "üìÖ –†–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º:\n"
    
    # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º
    for month in range(1, 13):
        month_name = datetime.date(year, month, 1).strftime('%B')
        amount = category_data['by_month'].get(month, 0)
        report += f"{month_name}: {amount:.2f}\n"
    
    return report

def get_month_name(month):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
    """
    months = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    return months[month - 1]

def format_budget_status(user_id, month=None, year=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü
    """
    if month is None:
        month = datetime.datetime.now().month
    if year is None:
        year = datetime.datetime.now().year
    
    excel_path = excel.get_excel_path(user_id, year)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not excel.os.path.exists(excel_path):
        return f"–ë—é–¥–∂–µ—Ç –Ω–∞ {get_month_name(month)} {year} –≥–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    import pandas as pd
    budget_df = pd.read_excel(excel_path, sheet_name='Budget')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—é–¥–∂–µ—Ç–µ
    month_budget = budget_df[budget_df['month'] == month]
    
    if month_budget.empty or month_budget['budget'].values[0] == 0:
        return f"–ë—é–¥–∂–µ—Ç –Ω–∞ {get_month_name(month)} {year} –≥–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    
    budget = month_budget['budget'].values[0]
    actual = month_budget['actual'].values[0]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞
    if budget > 0:
        percentage = (actual / budget) * 100
    else:
        percentage = 0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"üìä –°—Ç–∞—Ç—É—Å –±—é–¥–∂–µ—Ç–∞ –Ω–∞ {get_month_name(month)} {year} –≥–æ–¥–∞:\n\n"
    report += f"üí∞ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç: {budget:.2f}\n"
    report += f"üí∏ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {actual:.2f}\n"
    
    if actual <= budget:
        remaining = budget - actual
        report += f"‚úÖ –û—Å—Ç–∞—Ç–æ–∫: {remaining:.2f} ({100 - percentage:.1f}%)\n"
    else:
        overspent = actual - budget
        report += f"‚ùå –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {overspent:.2f} ({percentage - 100:.1f}%)\n"
    
    return report

def format_day_expenses(expenses, date=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    """
    if date is None:
        date = datetime.datetime.now().strftime('%Y-%m-%d')
    
    if expenses['status'] == False:
        return expenses['note']
        
    if not expenses or expenses['total'] == 0:
        return f"–†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {date} –Ω–µ –±—ã–ª–æ."
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {date}:\n\n"
    report += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {expenses['total']:.2f}\n"
    report += f"üßæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {expenses['count']}\n\n"
    
    report += "üìã –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º
    sorted_categories = sorted(
        expenses['by_category'].items(), 
        key=lambda x: x[1], 
        reverse=True
    )
    
    for category, amount in sorted_categories:
        from config import DEFAULT_CATEGORIES
        emoji = DEFAULT_CATEGORIES.get(category, "")
        percentage = (amount / expenses['total']) * 100
        report += f"{emoji} {category}: {amount:.2f} ({percentage:.1f}%)\n"
    
    return report
